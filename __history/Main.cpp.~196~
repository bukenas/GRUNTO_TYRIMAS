//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop
#include "Main.h"
#include "Unit2.h"
#include "Tserial.h"
#include "Tserial_event.h"
#include "GifImg.hpp"
//#include <windows.h>
#include <setupapi.h>

#include <string>
#include <iostream>
#include <Character.hpp>
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <stdarg.h>
#include <string.h>

#include <windows.h>
#include <setupapi.h>
#include <registry.hpp>


//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TMainForm *MainForm;

Tserial *com;
char sel_port[20];
unsigned int Addr1, Addr2, Addr3, Addr4;
unsigned char data_send[40], data_variklio[10], data[30],	monitoring_flag=0, flag_uzlaikymo=0, flag_stop=0, taimeriopabaiga_flag=0;
unsigned int kiek, RPM, counter_uzlaikymo=0, delay_counter=0;
long samp_interval=60000, laikas=1;
float current_rpm, senas_rpm, control_rpm;
FILE *f;
AnsiString Failas;
float poslinkis, jega;// slegis;
	TGIFImage *Gif = new TGIFImage;
	TGIFImage *CW = new TGIFImage;
	TGIFImage *CCW = new TGIFImage;
	//TImage *Image1 = new TImage(MainForm);
	//Image1->Parent = MainForm;

char cw, ccw;
float pos1, pos2, pos3, slegis;
char flag_mask=0, bu=1, bu2=1, flag_C1;

unsigned int CRC16(unsigned char x, unsigned int Crc);
unsigned char send_receive_cmd(char *cmd, unsigned short sizesend, unsigned short sizeget, char *answer);
void motor_command(float rpm, unsigned char dir);


//---------------------------------------------------------------------------
__fastcall TMainForm::TMainForm(TComponent* Owner)
	: TForm(Owner)
{


	int indic=5;
	unsigned long stat=5;

	com = new Tserial();

		char portas[20];
		char portonr[3];

	MainForm->Width = 830;
	MainForm->Height = 764;


	for(int p=1;p<99;p++){
		strcpy(portas,"\\\\.\\COM");
		itoa(p,portonr,10);
		strcat(portas, portonr);
		if (com!=0) {
			indic = com->connect(portas, 115200, spNONE);
			GetCommModemStatus(com,&stat);
			if(!indic) {
				ComboBox_Comport->Items->Add(portas+4);
			}
		}
	}
	Button_addresSET->Click();
    tab1->ActivePageIndex=0;
//	ComboBox_sampling->Items->Add("30 s");
//	ComboBox_sampling->Items->Add("1 min");
//	ComboBox_sampling->Items->Add("10 min");
//	ComboBox_sampling->Items->Add("30 min");
//	ComboBox_sampling->ItemIndex=1;
	Timer_sampling->Interval=samp_interval;


	Gif->LoadFromFile("apskritimas.gif");
	Gif->Animate=true;
	Image1->Picture->Assign(Gif);
	CW->LoadFromFile("animated-arrow-image-0103.gif");
	CW->Animate=true;
	Image2->Picture->Assign(CW);
	CCW->LoadFromFile("animated-arrow-image-0104.gif");
	CCW->Animate=true;
	Image3->Picture->Assign(CCW);



}
//---------------------------------------------------------------------------
void __fastcall TMainForm::Button_ConnectClick(TObject *Sender)
{
	char portonr[10] = {0};
	wchar_t * sel;
	Button_addresSET->Click();
	strcpy(sel_port,"\\\\.\\");
	sel=ComboBox_Comport->Items->Strings[ComboBox_Comport->ItemIndex].c_str();
	wcstombs(portonr, sel, wcslen(sel));
	strcat(sel_port, portonr);
	int ind=com->connect(sel_port, 115200, spNONE);  //sel_port=ComboBox_Comport->Items-get();
	if(ind==0) {
		Label5->Caption="CONNECTED";
		//Label5->Left = Label5->Left+15;
		Label5->Font->Color=clGreen;
		Timer_monitoring->Enabled=true;
	}
	else{
		Label5->Caption="NOT CONNECTED";
		//Label5->Left = Label5->Left-15;
		Label5->Font->Color=clRed;
    }
}
//---------------------------------------------------------------------------
unsigned char send_receive_cmd(char *cmd, unsigned short sizesend, unsigned short sizeget, char *answer) {
	unsigned char temp, data_send[10];
	unsigned int crc0;
	int counter=0, ii=0;
	char buffer [64];

	memcpy(buffer,cmd,64);

	while(com->getNbrOfBytes() > 0)
		com->getChar();

	crc0=0xFFFF;
	for(int k=1;k<sizesend;k++)
		crc0=CRC16(buffer[k], crc0);
	buffer[sizesend]=crc0;
	buffer[sizesend+1]=crc0>>8;
	buffer[sizesend+2]=0xC1;
	com->sendArray(buffer,sizesend+3);
	flag_C1=0;
	flag_mask=0;
	kiek=0;
	while(flag_C1!=1 && kiek++<200000){
		if(com->getNbrOfBytes()){
			temp = com->getChar();
			//MainForm->Memo2->Lines->Add(temp);
			if(temp==0xFE && flag_mask==0)
				flag_mask=1;
			else {
				answer[ii++]=temp;
				if(temp==0xC1 && flag_mask==0 && flag_C1==0) {
					flag_C1=1;
					flag_mask=0;
				}
				flag_mask=0;
			}
		}
	}
	if(kiek<200000 && buffer[1]==answer[1] && buffer[2]==answer[2]){
		MainForm->Memo1->Lines->Add("OK");
		return 1;
	}
	else {
		MainForm->Memo1->Lines->Add("BLOGAI");
		return 0;
    }
}
//---------------------------------------------------------------------------

unsigned int CRC16(unsigned char x, unsigned int Crc)
{
  int g=0x1021;
  unsigned char i;

  for(i=0;i<8;i++)
  {
	if(!(Crc&0x8000))  {
      if(!(x&0x80))
        Crc<<=1;
      else Crc=(Crc<<1)^1;
    }
    else  {
	  if(!(x&0x80))Crc=(Crc<<1)^g;
	   else Crc=(Crc<<1)^g^1;
    }
	x<<=1;
  }
  return(Crc);
}
void __fastcall TMainForm::Button1Click(TObject *Sender)
{
	char str[10];
	data_send[0]=0xC0;
	data_send[2]=0x02;

	///Memo1->Clear();
	//Memo2->Clear();
	monitoring_flag=1;
	int ind=com->connect(sel_port, 115200, spNONE);
	if(ind==0) {
		if(bu==1){
			Panel13->Color=clGreen;
			bu=0;
		}
		else
		{
		  Panel13->Color=clBtnFace;
			bu=1;
        }

		Label5->Caption="CONNECTED";
		if(Addr1!=0){
			data_send[1]=Addr1;//0x33;
			if(send_receive_cmd(data_send,3,8, data)){
				pos1 = (float)((signed short)(data[3]|data[4]<<8))/100;
				sprintf(str,"%3.2f",pos1);
				Label_pos1->Caption=str;
				flag_C1=0;
			}
			else
			   Label_pos1->Caption="--";
			Sleep(2);
		}
		else
			Label_pos1->Caption="off";

		if(Addr2!=0){
			data_send[1]=Addr2;//0x34;
			if(send_receive_cmd(data_send,3,8, data)){
				pos2 = ((float)((signed short)(data[3]|data[4]<<8))/100)*StrToFloat(Edit_koefjegos1->Text)/(StrToFloat(Edit_pvzplotas1->Text)/10000)*(-1);
				sprintf(str,"%3.2f",pos2);
				Label_pos2->Caption=str;
				flag_C1=0;
			}
			else
			   Label_pos2->Caption="--";
			Sleep(2);
		}
		else
			Label_pos2->Caption="off";


		if(Addr3!=0){
			data_send[1]=Addr3;//0x34;

			if(send_receive_cmd(data_send,3,8, data)){
				pos3 = ((float)((signed short)(data[3]|data[4]<<8))/100)*StrToFloat(Edit_koefjegos2->Text)/(StrToFloat(Edit_pvzplotas2->Text)/10000)*(-1);
				sprintf(str,"%3.2f",pos3);
				Label_pos3->Caption=str;
				flag_C1=0;
			}
			else
			   Label_pos3->Caption="--";
			Sleep(2);
		}
		else
			Label_pos3->Caption="off";

		if(Addr4!=0){
			data_send[1]=Addr4;//0x66;
			if(send_receive_cmd(data_send,3,8, data)){
				slegis = (float)((signed short)(data[3]|data[4]<<8));
				sprintf(str,"%3.0f",slegis);
				Label_slegis->Caption=str;
				flag_C1=0;
			}
			else {
			   Label_slegis->Caption="--";
			}
		}
		else
			Label_slegis->Caption="off";



		data_send[0]=0xC0;
		data_send[1]=0x01;
		data_send[2]=0x0D;
		if(send_receive_cmd(data_send,3,9, data)){

					if((data[5]>>1)&1==1)
						Panel_left->Color=clRed;
					else
						Panel_left->Color=clSilver;

					if(data[5]&1==1)
						Panel_right->Color=clRed;
					else
						Panel_right->Color=clSilver;

				if((data[5]>>3)&1==1){
					//Label_speed->Caption=float((data[4]<<8|data[3])/100.0);
					current_rpm=float((data[4]<<8|data[3])/100.0);
					Label_speed->Caption=current_rpm;
					if((data[5]>>2)&1==1) {
						if(CheckBox_variklio->Checked){
							MainForm->Image3->Visible=false;
							MainForm->Image2->Visible=true;
						}
						else {
							MainForm->Image3->Visible=true;
							MainForm->Image2->Visible=false;
						}

					}
					if(((data[5]>>2)&1)==0) {
						if(CheckBox_variklio->Checked){
							MainForm->Image2->Visible=false;
							MainForm->Image3->Visible=true;
						}
						else {
							MainForm->Image2->Visible=true;
							MainForm->Image3->Visible=false;
						}
					}

				}
				else{
					MainForm->Image2->Visible=false;
					MainForm->Image3->Visible=false;
					Label_speed->Caption="STOPED";
				}
				flag_C1=0;
			}
			else {
			   Label_slegis->Caption="--";
			}
		}
		else
			Label5->Caption="NOT CONNECTED";

    com->disconnect();

	monitoring_flag=0;
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::Timer_monitoringTimer(TObject *Sender)
{
	TMeasuringTread *matavimothread = new TMeasuringTread (false);
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::Button_StopClick(TObject *Sender)
{
	motor_command(0,0);
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::Button3Click(TObject *Sender)
{
	current_rpm=StrToFloat(Edit_RPM->Text.Trim());//RPM;   // edgaras: vietoj RPM i funkcija motor_command perdaviau current_rpm,
	motor_command(current_rpm,cw);                          // nes buvo nukandama reiksme po kalbelio
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::Button2Click(TObject *Sender)
{
	current_rpm=StrToFloat(Edit_RPM->Text.Trim());//RPM;   // edgaras: vietoj RPM i funkcija motor_command perdaviau current_rpm,
	motor_command(current_rpm,ccw);                          // nes buvo nukandama reiksme po kalbelio
}
//---------------------------------------------------------------------------


void __fastcall TMainForm::Timer_samplingTimer(TObject *Sender)
{
	Timer_monitoring->Enabled=false;
	char str[6];
	Word Year, Month, Day, Hour, Min, Sec, MSec;
	TDateTime dtPresent = Now();
	DecodeDate(dtPresent, Year, Month, Day);
	DecodeTime(dtPresent, Hour, Min, Sec, MSec);

	TListItem  *ListItem = ListView1->Items->Item[ListView1->Items->Count-1];
	f = fopen(Failas.c_str(), "a+");
	//Button1->Click();
	ListItem=this->ListView1->Items->Add();
	ListItem->Caption = dtPresent;//(float)laikas/1000;
	ListItem->SubItems->Add(laikas);

	sprintf(str,"%2.2f",pos1);
	ListItem->SubItems->Add(str);
	sprintf(str,"%2.2f",pos2);
	ListItem->SubItems->Add(str);
	sprintf(str,"%2.2f",slegis);
	ListItem->SubItems->Add(str);

	int s = ListItem->Top - ListView1->TopItem->Top;      //kad skrolintusi kartu
	ListView1->Scroll(NULL, s);

	//poslinkis=1.1;
	//jega=2.2;
	//slegis=3.3;
	//Memo1->Lines->Add(dtPresent.TimeString());
	fprintf(f,"%d-%d-%d %d:%d:%d, %d, %3.2f, %3.2f, %3.2f\n",Year, Month, Day, Hour, Min, Sec, laikas,(float)pos1,(float)pos2,(float)slegis);
	fclose(f);
	if(laikas==2){
	  if(CheckBox_porinio->State==1)  // jei reikia tikrinti porini slegi
			Timer_porinioslegio->Enabled=true;
	}
	laikas++; // virtualus laikas delta T

	Timer_sampling->Interval=samp_interval;
	Timer_monitoring->Enabled=true;
}
//---------------------------------------------------------------------------

//void __fastcall TMainForm::ComboBox_samplingChange(TObject *Sender)
//{
//if(ComboBox_sampling->ItemIndex==0)
//	samp_interval=1000;
//if(ComboBox_sampling->ItemIndex==1)
//	samp_interval=60000;
//if(ComboBox_sampling->ItemIndex==2)
//	samp_interval=600000;
//if(ComboBox_sampling->ItemIndex==3)
//	samp_interval=1800000;
//
//}
//---------------------------------------------------------------------------

void __fastcall TMainForm::Button_sampling_startClick(TObject *Sender)
{
	Failas=ExtractFilePath(ParamStr(0))+"crez.txt";
	f = fopen(Failas.c_str(), "w");
	fclose(f);
	Button_sampling_start->Enabled=false;
	Button_sampling_stop->Enabled=true;
    flag_uzlaikymo=0;
    laikas=1;
	flag_stop=0;

	if(tab1->ActivePageIndex==0){
		current_rpm=StrToFloat(Edit_pradinisRPM->Text.Trim());
		motor_command(current_rpm,cw); // paleidziamas variklis
		Timer_sampling->Interval=1;
		Timer_sampling->Enabled=true;
		Timer_kompresinis->Enabled=true;
	  //	if(CheckBox_porinio->State==1)  // jei reikia tikrinti porini slegi
	  //		Timer_porinioslegio->Enabled=true;
	}
	if(tab1->ActivePageIndex==1){
		current_rpm=StrToFloat(Edit_RPMpradinis2->Text.Trim());
		motor_command(current_rpm,cw); // paleidziamas variklis
		Timer_sampling2->Interval=1;
		Timer_sampling2->Enabled=true;
		Timer_poslinkio->Enabled=true;

	}
	if(tab1->ActivePageIndex==2){
		current_rpm=StrToFloat(Edit_RPMpradinis3->Text.Trim());
		motor_command(current_rpm,cw); // paleidziamas variklis
		Timer_sampling3->Interval=1;
		Timer_sampling3->Enabled=true;
		Timer_poslinkio->Enabled=true;

	}

	Image1->Visible=true;
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::Button_sampling_stopClick(TObject *Sender)
{
	motor_command(0,0);
	Timer_sampling->Enabled=false;
	Timer_sampling2->Enabled=false;
	Timer_sampling3->Enabled=false;
	Button_sampling_stop->Enabled=false;
	Button_sampling_start->Enabled=true;
	Timer_uzlaikymo->Enabled=false;
	Timer_porinioslegio->Enabled=false;
	Image1->Visible=false;
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::Button4Click(TObject *Sender)
{
	int msgboxID = MessageBox(
		NULL,
		"Ar norite išvalyti lentelę?",
		"Klausimas",
		MB_ICONINFORMATION | MB_YESNOCANCEL | MB_DEFBUTTON2
	);

	switch (msgboxID)
	{
	case IDYES:
		ListView1->Clear();
		ListView2->Clear();
		ListView3->Clear();
		laikas=1;
		break;
	case IDTRYAGAIN:
		// TODO: add code
		break;
	case IDCONTINUE:
		// TODO: add code
		break;
	}
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::Button5Click(TObject *Sender)
{
	int indic=5;
	unsigned long stat=5;

	com = new Tserial();

	char portas[20]={0};
	char portonr[3]={0};
	ComboBox_Comport->Clear();
	ComboBox_Comport->Text="Select port";
	for(int p=1;p<99;p++){
		strcpy(portas,"\\\\.\\COM");
		itoa(p,portonr,10);
		strcat(portas, portonr);
		if (com!=0) {
			indic = com->connect(portas, 19200, spNONE);
			GetCommModemStatus(com,&stat);
			if(!indic) {
				ComboBox_Comport->Items->Add(portas+4);
			}
		}
	}
}
//---------------------------------------------------------------------------



void __fastcall TMainForm::Button6Click(TObject *Sender)
{
	data_send[0]=0xC0;
	data_send[1]=Addr1;
	data_send[2]=0x03;

	send_receive_cmd(data_send,3,8, data);
//	pos1 = (float)((signed short)(data[3]|data[4]<<8))/100;
//	Label1->Caption=pos1;
//	Memo2->Lines->Add(pos1);
	flag_C1=0;
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::Button7Click(TObject *Sender)
{
	data_send[0]=0xC0;
	data_send[1]=Addr2;
	data_send[2]=0x03;

	send_receive_cmd(data_send,3,8, data);
//	pos1 = (float)((signed short)(data[3]|data[4]<<8))/100;
//	Label1->Caption=pos1;
//	Memo2->Lines->Add(pos1);
	flag_C1=0;
}
//---------------------------------------------------------------------------


void __fastcall TMainForm::Timer_variklioTimer(TObject *Sender)
{
	if(monitoring_flag==0) {
		int ind=com->connect(sel_port, 115200, spNONE);
		if(ind==0) {
			send_receive_cmd(data_variklio,6,6, data_variklio);
			Timer_monitoring->Enabled=true;
			Timer_variklio->Enabled=false;
		}
		com->disconnect();
	}
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::Timer_porinioslegioTimer(TObject *Sender)
{
	if(slegis>pos2*StrToFloat(Edit_poriniokoef->Text) && flag_uzlaikymo==0){
		//Timer_monitoring->Enabled=false;
		counter_uzlaikymo=0;
		Timer_uzlaikymo->Enabled=true;
		Timer_porinioslegio->Enabled=false;
		senas_rpm=current_rpm;
		current_rpm=current_rpm-current_rpm*StrToFloat(Edit_mazinimopagaporin->Text)/100;   //pamazinamas variklio rpm
		if(current_rpm<0.02)
			current_rpm=0.02;
		flag_uzlaikymo=1;
		motor_command(current_rpm,cw);
	}
	Panel14->Color=clGreen;
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::Timer_uzlaikymoTimer(TObject *Sender)
{
	counter_uzlaikymo++;
	if(taimeriopabaiga_flag==1){
		Timer_uzlaikymo->Enabled=false;
		taimeriopabaiga_flag=0;
		flag_uzlaikymo=0;
		counter_uzlaikymo=0;
		Timer_porinioslegio->Enabled=true;
	}
	if(counter_uzlaikymo>StrToFloat(Edit_uzlaikymas->Text)*60) {

		//Timer_uzlaikymo->Enabled=false;
		motor_command(senas_rpm,cw);
		current_rpm=senas_rpm;
		taimeriopabaiga_flag=1;
	}

}
//---------------------------------------------------------------------------


void __fastcall TMainForm::Timer_kompresinisTimer(TObject *Sender)
{
	if(pos2>StrToFloat(Edit_pertankslegis->Text) && flag_stop==0){
		motor_command(0,0);
		Timer_uzlaikymo->Enabled=false;
		Timer_porinioslegio->Enabled=false;
		Panel14->Color=clRed;
		delay_counter=0;
		flag_stop=1;
		Timer_delay->Enabled=true;
	}

	if(flag_stop==1 && delay_counter>StrToFloat(Edit_pauze1->Text)*60){
		Timer_delay->Enabled=false;
		flag_stop=2;
		current_rpm=StrToFloat(Edit_backRPM->Text);
		motor_command(current_rpm,ccw);  // varomas atgal
		Timer_uzlaikymo->Enabled=false;
		Timer_porinioslegio->Enabled=false;
		Panel14->Color=clRed;
	}
	if(flag_stop==2 && pos2<StrToFloat(Edit_gamtinis->Text)){
		motor_command(0,0);
		Timer_uzlaikymo->Enabled=false;
		Timer_porinioslegio->Enabled=false;
		Panel14->Color=clRed;
		delay_counter=0;
		flag_stop=3;
		Timer_delay->Enabled=true;
	}
	if(flag_stop==3 && delay_counter>StrToFloat(Edit_pauze2->Text)*60){
		Timer_delay->Enabled=false;
		flag_stop=4;
		current_rpm=StrToFloat(Edit_pradinisRPM->Text);
		motor_command(current_rpm,cw);
		flag_uzlaikymo=0;
		counter_uzlaikymo=0;
		Timer_porinioslegio->Enabled=true;
	}
	if(flag_stop==4 && pos2>StrToFloat(Edit_maxslegis->Text)){
		motor_command(0,0);
		Timer_uzlaikymo->Enabled=false;
		Timer_porinioslegio->Enabled=false;\
		Panel14->Color=clRed;
		flag_stop=5;
		delay_counter=0;
		Timer_delay->Enabled=true;
	}
	if(flag_stop==5 && delay_counter>StrToFloat(Edit_pauze3->Text)*60){   //laukiam
		Timer_delay->Enabled=false;
		flag_stop=6;
		current_rpm=StrToFloat(Edit_finalRPM->Text);
		motor_command(current_rpm,ccw); //dar kartą atgal (ir paskutinį)
		Timer_uzlaikymo->Enabled=false;
		Timer_porinioslegio->Enabled=false;
		Panel14->Color=clRed;
	}
	if(pos2<StrToFloat(Edit_gamtinis->Text) && flag_stop==6){
		motor_command(0,0);
		Timer_uzlaikymo->Enabled=false;
		Timer_porinioslegio->Enabled=false;
		Panel14->Color=clRed;
		delay_counter=0;
		flag_stop=7;
		Button_sampling_stop->Click();
		//Timer_delay->Enabled=true;
	}

}
//---------------------------------------------------------------------------
void motor_command(float rpm, unsigned char dir){
	MainForm->Timer_monitoring->Enabled=false;
	RPM=100*(rpm+0.00001);
	current_rpm=RPM/100;
	data_variklio[0]=0xC0;
	data_variklio[1]=0x01; //adresas
	if (dir==2) {
		data_variklio[2]=0x0C; // pauzes komanda
		//MainForm->Image2->Visible=false;
		//MainForm->Image3->Visible=false;
	}
	else{
		if(rpm==0){
			data_variklio[2]=0x04; // stabdymo komanda
		   //	MainForm->Image2->Visible=false;
			//MainForm->Image3->Visible=false;
		}
		else {
			data_variklio[2]=0x02; // paleidimo komanda
			data_variklio[3]=RPM;
			data_variklio[4]=RPM>>8;     //1-290
			data_variklio[5]=dir;  //0 CCW  1 CW
//			if(dir==1) {
//				MainForm->Image3->Visible=false;
//				MainForm->Image2->Visible=true;
//			}
//			if(dir==0) {
//				MainForm->Image2->Visible=false;
//				MainForm->Image3->Visible=true;
//			}
		}
	}
	MainForm->Timer_variklio->Enabled=true;
}


void __fastcall TMainForm::Timer_delayTimer(TObject *Sender)
{
	delay_counter++;
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::Timer_sampling2Timer(TObject *Sender)
{
	Timer_monitoring->Enabled=false;
	char str[6];
	Word Year, Month, Day, Hour, Min, Sec, MSec;
	TDateTime dtPresent = Now();
	DecodeDate(dtPresent, Year, Month, Day);
	DecodeTime(dtPresent, Hour, Min, Sec, MSec);

	TListItem  *ListItem = ListView2->Items->Item[ListView2->Items->Count-1];
	f = fopen(Failas.c_str(), "a+");

	ListItem=this->ListView2->Items->Add();
	ListItem->Caption = dtPresent;
	ListItem->SubItems->Add(laikas);

	sprintf(str,"%2.2f",pos1);
	ListItem->SubItems->Add(str);
	sprintf(str,"%2.2f",pos2);
	ListItem->SubItems->Add(str);
	sprintf(str,"%2.2f",pos3);
	ListItem->SubItems->Add(str);


	int s = ListItem->Top - ListView2->TopItem->Top;
	ListView2->Scroll(NULL, s);

	fprintf(f,"%d-%d-%d %d:%d:%d, %d, %3.2f, %3.2f, %3.2f\n",Year, Month, Day, Hour, Min, Sec, laikas,(float)pos1,(float)pos2,(float)pos3);

	fclose(f);
	laikas++; // virtualus laikas delta T
	Timer_sampling2->Interval=samp_interval;
	Timer_monitoring->Enabled=true;
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::Timer_sampling3Timer(TObject *Sender)
{
	Timer_monitoring->Enabled=false;
	char str[6];
	Word Year, Month, Day, Hour, Min, Sec, MSec;
	TDateTime dtPresent = Now();
	DecodeDate(dtPresent, Year, Month, Day);
	DecodeTime(dtPresent, Hour, Min, Sec, MSec);

	TListItem  *ListItem = ListView3->Items->Item[ListView3->Items->Count-1];
	f = fopen(Failas.c_str(), "a+");
	//Button1->Click();
	ListItem=this->ListView3->Items->Add();
	ListItem->Caption = dtPresent;
	ListItem->SubItems->Add(laikas);

	sprintf(str,"%2.2f",pos1);
	ListItem->SubItems->Add(str);
	sprintf(str,"%2.2f",pos2);
	ListItem->SubItems->Add(str);


	int s = ListItem->Top - ListView3->TopItem->Top;
	ListView3->Scroll(NULL, s);

	fprintf(f,"%d-%d-%d %d:%d:%d, %d, %3.2f, %3.2f\n",Year, Month, Day, Hour, Min, Sec, laikas,(float)pos1,(float)pos2);
	fclose(f);
	laikas++; // virtualus laikas delta T
	Timer_sampling3->Interval=samp_interval;
	Timer_monitoring->Enabled=true;
}
//---------------------------------------------------------------------------


void __fastcall TMainForm::Timer_poslinkioTimer(TObject *Sender)
{
	if(tab1->ActivePageIndex==1)
		if(pos1>StrToFloat(Edit_maxposlinkis2->Text)){
			motor_command(0,0);
			Button_sampling_stop->Click();
		}
	if(tab1->ActivePageIndex==2)
		if(pos1>StrToFloat(Edit_maxposlinkis3->Text)){
			motor_command(0,0);
			Button_sampling_stop->Click();
		}
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::Button9Click(TObject *Sender)
{
	UnicodeString fail;   //	FILE *FSave;
	if (SaveDialog1->Execute())
	{
		fail=ExtractFilePath(ParamStr(0))+"crez.txt";
		CopyFileW(fail.w_str(), SaveDialog1->FileName.w_str(), FALSE);
	}
}
//---------------------------------------------------------------------------


void __fastcall TMainForm::Edit_samplingintervalChange(TObject *Sender)
{
	samp_interval=StrToFloat(Edit_samplinginterval->Text)*60000;
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::Button_addresSETClick(TObject *Sender)
{
	Addr1=StrToInt(Edit_Addr1->Text);
	Addr2=StrToInt(Edit_Addr2->Text);
	Addr3=StrToInt(Edit_Addr3->Text);
	Addr4=StrToInt(Edit_Addr4->Text);
}
//---------------------------------------------------------------------------



void __fastcall TMainForm::Button10Click(TObject *Sender)
{
	data_send[0]=0xC0;
	data_send[1]=Addr3;
	data_send[2]=0x03;

	send_receive_cmd(data_send,3,8, data);
//	pos1 = (float)((signed short)(data[3]|data[4]<<8))/100;
//	Label1->Caption=pos1;
//	Memo2->Lines->Add(pos1);
	flag_C1=0;
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::FormClose(TObject *Sender, TCloseAction &Action)
{
	//Failas=ExtractFilePath(ParamStr(0))+"preset.txt";
	//f = fopen(Failas.c_str(), "a+");
   //	fprintf(f,"%f, %f, %f\n",Edit_pradinisRPM->Text.ToDouble(), Edit_pertankslegis->Text.ToDouble(),Edit_pauze1->Text.ToDouble());
   //	fclose(f);


	TIniFile* ini = new TIniFile(GetCurrentDir()+"\\preset.ini");
	if( ini == NULL ){
		ShowMessage("The file could not be opened");
		return;
		}
	else {
		ini->WriteFloat("Settings","PradinisRPM",Edit_pradinisRPM->Text.ToDouble());
		ini->WriteFloat("Settings","Pertankslegis",Edit_pertankslegis->Text.ToDouble());
		ini->WriteFloat("Settings","pauze1",Edit_pauze1->Text.ToDouble());
        ini->WriteFloat("Settings","backRPM",Edit_backRPM->Text.ToDouble());
		ini->WriteFloat("Settings","gamtinis",Edit_gamtinis->Text.ToDouble());
		ini->WriteFloat("Settings","pauze2",Edit_pauze2->Text.ToDouble());
		ini->WriteFloat("Settings","finalRPM",Edit_finalRPM->Text.ToDouble());
		ini->WriteFloat("Settings","maxslegis",Edit_maxslegis->Text.ToDouble());
		ini->WriteFloat("Settings","pauze3",Edit_pauze3->Text.ToDouble());
		ini->WriteFloat("Settings","poriniokoef",Edit_poriniokoef->Text.ToDouble());
		ini->WriteFloat("Settings","mazinimopagaporin",Edit_mazinimopagaporin->Text.ToDouble());
		ini->WriteFloat("Settings","uzlaikymas",Edit_uzlaikymas->Text.ToDouble());
		ini->WriteFloat("Settings","pvzplotas1",Edit_pvzplotas1->Text.ToDouble());
		ini->WriteFloat("Settings","koefjegos1",Edit_koefjegos1->Text.ToDouble());
		ini->WriteFloat("Settings","pvzplotas2",Edit_pvzplotas2->Text.ToDouble());
		ini->WriteFloat("Settings","koefjegos2",Edit_koefjegos2->Text.ToDouble());
		ini->WriteFloat("Settings","samplinginterval",Edit_samplinginterval->Text.ToDouble());
		ini->WriteFloat("Settings","Addr1",Edit_Addr1->Text.ToDouble());
		ini->WriteFloat("Settings","Addr2",Edit_Addr2->Text.ToDouble());
		ini->WriteFloat("Settings","Addr3",Edit_Addr3->Text.ToDouble());
		ini->WriteFloat("Settings","Addr4",Edit_Addr4->Text.ToDouble());
		ini->WriteFloat("Settings","RPMpradinis2",Edit_RPMpradinis2->Text.ToDouble());
		ini->WriteFloat("Settings","maxposlinkis2",Edit_maxposlinkis2->Text.ToDouble());
		ini->WriteFloat("Settings","RPMpradinis3",Edit_RPMpradinis3->Text.ToDouble());
		ini->WriteFloat("Settings","maxposlinkis3",Edit_maxposlinkis3->Text.ToDouble());
		ini->WriteFloat("Settings","RPM",Edit_RPM->Text.ToDouble());
		ini->WriteFloat("Settings","varikliokryptis",CheckBox_variklio->Checked);
		ini->WriteFloat("Settings","porinischeckbox",CheckBox_porinio->Checked);



		delete ini;
	}

}
//---------------------------------------------------------------------------



void __fastcall TMainForm::FormActivate(TObject *Sender)
{
	TIniFile* ini = new TIniFile(GetCurrentDir()+"\\preset.ini");
	Edit_pradinisRPM->Text=ini->ReadFloat("Settings","PradinisRPM",0);
	Edit_pertankslegis->Text=ini->ReadFloat("Settings","Pertankslegis",0);
	Edit_pauze1->Text=ini->ReadFloat("Settings","pauze1",0);
	Edit_backRPM->Text=ini->ReadFloat("Settings","backRPM",0);
	Edit_gamtinis->Text=ini->ReadFloat("Settings","gamtinis",0);
	Edit_pauze2->Text=ini->ReadFloat("Settings","pauze2",0);
	Edit_finalRPM->Text=ini->ReadFloat("Settings","finalRPM",0);
	Edit_maxslegis->Text=ini->ReadFloat("Settings","maxslegis",0);
	Edit_pauze3->Text=ini->ReadFloat("Settings","pauze3",0);
	Edit_poriniokoef->Text=ini->ReadFloat("Settings","poriniokoef",0);
	Edit_mazinimopagaporin->Text=ini->ReadFloat("Settings","mazinimopagaporin",0);
	Edit_uzlaikymas->Text=ini->ReadFloat("Settings","uzlaikymas",0);
	Edit_pvzplotas1->Text=ini->ReadFloat("Settings","pvzplotas1",0);
	Edit_koefjegos1->Text=ini->ReadFloat("Settings","koefjegos1",0);
    Edit_pvzplotas2->Text=ini->ReadFloat("Settings","pvzplotas2",0);
	Edit_koefjegos2->Text=ini->ReadFloat("Settings","koefjegos2",0);
	Edit_samplinginterval->Text=ini->ReadFloat("Settings","samplinginterval",0);
	Edit_Addr1->Text=ini->ReadFloat("Settings","Addr1",0);
	Edit_Addr2->Text=ini->ReadFloat("Settings","Addr2",0);
	Edit_Addr3->Text=ini->ReadFloat("Settings","Addr3",0);
	Edit_Addr4->Text=ini->ReadFloat("Settings","Addr4",0);
	Edit_RPMpradinis2->Text=ini->ReadFloat("Settings","RPMpradinis2",0);
	Edit_maxposlinkis2->Text=ini->ReadFloat("Settings","maxposlinkis2",0);
	Edit_RPMpradinis3->Text=ini->ReadFloat("Settings","RPMpradinis3",0);
	Edit_maxposlinkis3->Text=ini->ReadFloat("Settings","maxposlinkis3",0);
	Edit_RPM->Text=ini->ReadFloat("Settings","RPM",0);
	CheckBox_variklio->Checked = ini->ReadFloat("Settings","varikliokryptis",0);
	CheckBox_porinio->Checked = ini->ReadFloat("Settings","porinischeckbox",0);
	delete ini;

	if(CheckBox_variklio->Checked==true){
		cw=1;
		ccw=0;
	}
	else {
		cw=0;
		ccw=1;
	}
}
//---------------------------------------------------------------------------


void __fastcall TMainForm::CheckBox_variklioClick(TObject *Sender)
{
	if(CheckBox_variklio->Checked==true){
		cw=1;
		ccw=0;
	}
	else {
		cw=0;
		ccw=1;
	}

}
//---------------------------------------------------------------------------

void __fastcall TMainForm::CheckBox_porinioClick(TObject *Sender)
{
//	if(CheckBox_porinio->State==1)  // jei reikia tikrinti porini slegi
//		Timer_porinioslegio->Enabled=true;
	if(CheckBox_porinio->State==0)  // jei reikia tikrinti porini slegi
		Timer_porinioslegio->Enabled=false;

}
//---------------------------------------------------------------------------


void __fastcall TMainForm::Button11Click(TObject *Sender)
{
com->disconnect();
}
//---------------------------------------------------------------------------




